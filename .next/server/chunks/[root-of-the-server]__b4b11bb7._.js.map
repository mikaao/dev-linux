{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///root/src/app/api/estacoes/route.ts"],"sourcesContent":["// src/app/api/estacoes/route.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport mysql from \"mysql2/promise\";\r\n\r\nexport const dynamic = \"force-dynamic\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const conn = await mysql.createConnection({\r\n      host: \"127.0.0.1\",\r\n      user: \"root\",\r\n      password: \"@M1ch43l52\",\r\n      database: \"bancotr\",\r\n    });\r\n\r\n    /* -- SELECT já com aliases ------------------------------------ */\r\n    const [rows] = await conn.execute(\r\n      `SELECT\r\n        ESTACAO   AS codigo,        -- sigla (string)\r\n         DESCRICAO AS nome           -- nome da subestação\r\n       FROM id_estacao\r\n       ORDER BY ESTACAO`\r\n    );\r\n\r\n    await conn.end();\r\n\r\n    /* rows já está no formato [{codigo:\"ATL2\", nome:\"SE Atlântida 2\"}] */\r\n    return NextResponse.json(rows);\r\n\r\n  } catch (err) {\r\n    console.error(err);\r\n    return NextResponse.json(\r\n      { message: \"Erro ao buscar subestações\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;;AAChC;AACA;;;AAEO,MAAM,UAAU;AAEhB,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;YACxC,MAAM;YACN,MAAM;YACN,UAAU;YACV,UAAU;QACZ;QAEA,iEAAiE,GACjE,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAC/B,CAAC;;;;uBAIgB,CAAC;QAGpB,MAAM,KAAK,GAAG;QAEd,oEAAoE,GACpE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA6B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}